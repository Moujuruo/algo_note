/*
 * @lc app=leetcode.cn id=924 lang=cpp
 * @lcpr version=30122
 *
 * [924] 尽量减少恶意软件的传播
 */


// @lcpr-template-start
using namespace std;
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <deque>
#include <functional>
#include <iostream>
#include <list>
#include <queue>
#include <stack>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>
// @lcpr-template-end
// @lc code=start
class Solution {
public:
    static const int N = 501;
    int fa[N], sz[N];
    int find(int x) {
        if (fa[x] == x) return x;
        return fa[x] = find(fa[x]);
    }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for (int i = 0; i < n; i++) {
            fa[i] = i;
            sz[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j]) {
                    int fx = find(i), fy = find(j);
                    if (fx != fy) {
                        fa[fx] = fy;
                        sz[fy] += sz[fx];
                    }
                }
            }
        }
        vector<int> malware(n, 0);
        for (int i : initial) {
            malware[find(i)]++;
        }
        int ans = -1, ans_sz = 0;
        for (int i : initial) {
            int f = find(i);
            if (malware[f] == 1) {
                if (ans_sz < sz[f] || (ans_sz == sz[f] && i < ans)) {
                    ans_sz = sz[f];
                    ans = i;
                }
            }
        }
        if (ans == -1) {
            ans = *min_element(initial.begin(), initial.end());
        }
        return ans;
    }
};
// @lc code=end



/*
// @lcpr case=start
// [[1,1,0],[1,1,0],[0,0,1]]\n[0,1]\n
// @lcpr case=end

// @lcpr case=start
// [[1,0,0],[0,1,0],[0,0,1]]\n[0,2]\n
// @lcpr case=end

// @lcpr case=start
// [[1,1,1],[1,1,1],[1,1,1]]\n[1,2]\n
// @lcpr case=end

 */

